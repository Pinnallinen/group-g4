// Most of the file was generated by ChatGPT. Some modifications were made to apply the code for our purposes

package com.weathertraffic.service;

import com.weathertraffic.model.WeatherStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import java.time.Instant;
import java.time.temporal.ChronoUnit;


@Service
public class WeatherService {
    // API key, urls, etc...
    private static final String FMI_API_URL =
            "https://opendata.fmi.fi/wfs?service=WFS&version=2.0.0&request=getFeature" +
                    "&storedquery_id=fmi::observations::weather::timevaluepair&place={city}" +
                    "&parameters=temperature,windspeedms&starttime={starttime}T23:50:00Z&endtime={endtime}T23:50:00Z";

    public WeatherStatus getWeather(String city) throws Exception  {
        RestTemplate restTemplate = new RestTemplate();
        Instant now = Instant.now();
        String starttime = now.minus(1, ChronoUnit.DAYS).toString().substring(0, 10);
        String endtime = now.toString().substring(0, 10);

        String url = FMI_API_URL
                .replace("{city}", city)
                .replace("{starttime}", starttime)
                .replace("{endtime}", endtime);

        String xmlData = restTemplate.getForObject(url, String.class);

        // Parse XML Data
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        assert xmlData != null;
        Document document = builder.parse(new java.io.ByteArrayInputStream(xmlData.getBytes()));

        String temperatureTime = "Unknown";
        String windTime = "Unknown";
        float temperature = 0f;
        float windSpeed = 0f;

        // Parse temperature values
        NodeList measurementNodes = document.getElementsByTagName("wml2:MeasurementTimeseries");
        for (int i = 0; i < measurementNodes.getLength(); i++) {
            String description = measurementNodes.item(i).getAttributes().getNamedItem("gml:id").getTextContent();
            if (description.contains("temperature")) {
                NodeList temperatureValues = measurementNodes.item(i).getChildNodes();
                for (int j = 0; j < temperatureValues.getLength(); j++) {
                    if (temperatureValues.item(j).getNodeName().equals("wml2:point")) {
                        NodeList pointNodes = temperatureValues.item(j).getChildNodes();
                        System.out.println("wml2:point found");
                        for (int k = 0; k < pointNodes.getLength(); k++)
                        {
                            if (pointNodes.item(k).getNodeName().equals("wml2:MeasurementTVP")) {
                                String time = pointNodes.item(k).getChildNodes().item(1).getTextContent();
                                String value = pointNodes.item(k).getChildNodes().item(3).getTextContent();
                                System.out.println("Temperature at " + time + ": " + value + " Â°C");

                                temperatureTime = time;
                                temperature = Float.parseFloat(value);
                            }
                        }
                    }
                }
            }

            if (description.contains("windspeedms")) {
                NodeList windSpeedValues = measurementNodes.item(i).getChildNodes();
                for (int j = 0; j < windSpeedValues.getLength(); j++) {
                    if (windSpeedValues.item(j).getNodeName().equals("wml2:point")) {
                        NodeList pointNodes = windSpeedValues.item(j).getChildNodes();
                        System.out.println("wml2:point found");
                        for (int k = 0; k < pointNodes.getLength(); k++)
                        {
                            if (pointNodes.item(k).getNodeName().equals("wml2:MeasurementTVP")) {
                                String time = pointNodes.item(k).getChildNodes().item(1).getTextContent();
                                String value = pointNodes.item(k).getChildNodes().item(3).getTextContent();
                                System.out.println("Wind Speed at " + time + ": " + value + " m/s");

                                windTime = time;
                                windSpeed = Float.parseFloat(value);
                            }
                        }
                    }
                }
            }
        }

        String finalDescription = "Weather in " + city + ". Temperature (C) at " + temperatureTime + ", wind speed (m/s) at " + windTime;

        WeatherStatus status = new WeatherStatus();
        status.setDescription(finalDescription);
        status.setTemperature(temperature);
        status.setWindSpeed(windSpeed);
        return status;
    }
}

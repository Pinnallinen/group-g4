// Most of the file was generated by ChatGPT. Some modifications were made to apply the code for our purposes

package com.weathertraffic.service;

import com.weathertraffic.model.WeatherStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.StringReader;

@Service
public class WeatherService {
    // API key, urls, etc...
    private static final String FMI_API_URL =
            "https://opendata.fmi.fi/wfs?service=WFS&version=2.0.0&request=getFeature" +
                    "&storedquery_id=fmi::observations::weather::timevaluepair&place={city}" +
                    "&parameters=temperature,windspeedms&starttime=2024-09-27T10:30:00Z&endtime=2024-09-27T13:40:00Z";

    public WeatherStatus getWeather(String city) throws Exception  {
        RestTemplate restTemplate = new RestTemplate();
        String url = FMI_API_URL.replace("{city}", city);
        String xmlData = restTemplate.getForObject(url, String.class);

        // Parse XML Data
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse(new InputSource(new StringReader(xmlData)));

        NodeList temperatureNodes = document.getElementsByTagName("wml2:MeasurementTVP");

        String time = "Unknown";
        float temperature = 0f;

        String description = "";
        if (temperatureNodes.getLength() > 0) {
            NodeList childNodes = temperatureNodes.item(temperatureNodes.getLength() - 1).getChildNodes();
            for (int i = 0; i < childNodes.getLength(); i++) {
                Node node = childNodes.item(i);
                if (node.getNodeName().equals("wml2:time")) {
                    time = node.getTextContent();
                }
                else if (node.getNodeName().equals("wml2:value")) {
                    System.out.println("value: " + node.getTextContent());
                    temperature = Float.parseFloat(node.getTextContent());
                }
            }
            description = String.format("Weather as of %s", time) ;
        }
        else {
            description = "Waether couldn't be found";
        }

        WeatherStatus status = new WeatherStatus();
        status.setDescription(description);
        status.setTemperature(temperature);
        status.setWindSpeed(0f);
        return status;
    }
}
